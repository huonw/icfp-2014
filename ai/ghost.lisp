(defun generate-ghost-pos-2 (ghost-info)
  (if (atom ghost-info) 0
    (let ((ghost (car ghost-info)))
      (let ((ghost-pos (car (cdr ghost))) (dir (cdr (cdr ghost))))
        (let ((x (car ghost-pos)) (y (cdr ghost-pos)))
          (let
              ((ret
                (cons (cons (+ x 1) (+ y 1))
                (cons (cons (+ x 1) (- y 1))
                (cons (cons (- x 1) (+ y 1))
                (cons (cons (- x 1) (- y 1))
                (generate-ghost-pos-2 (cdr ghost-info))))))))
            (if (= dir LEFT) (pass) (set ret (cons (cons (+ x 2) y) ret)))
            (if (= dir RIGHT) (pass) (set ret (cons (cons (+ x 2) y) ret)))
            (if (= dir UP) (pass) (set ret (cons (cons x (+ y 2)) ret)))
            (if (= dir DOWN) (pass) (set ret (cons (cons x (- y 2)) ret)))
            ret
          )
        )
      )
    )
  )
)

(defun generate-ghost-pos-0 (ghost-info) (map (lambda (ghost) (car (cdr ghost))) ghost-info))
(defun generate-ghost-pos-none (_) 0)

; (defun generate-ghost-pos-1 (ghost-info) (generate-ghost-pos-1-w-dir ghost-info 999))
(defun generate-ghost-pos-1 (ghost-info)
  (if (atom ghost-info) 0
    (let ((ghost (car ghost-info)))
      (let ((ghost-pos (car (cdr ghost))) (dir (cdr (cdr ghost))))
        (let ((x (car ghost-pos)) (y (cdr ghost-pos))
              (ret (generate-ghost-pos-1 (cdr ghost-info))))
          (if (= dir LEFT) (pass) (set ret (cons (inc x y RIGHT) ret)))
          (if (= dir RIGHT) (pass) (set ret (cons (inc x y LEFT) ret)))
          (if (= dir UP) (pass) (set ret (cons (inc x y DOWN) ret)))
          (if (= dir DOWN) (pass) (set ret (cons (inc x y UP) ret)))
          (cons ghost-pos ret)
        )
      )
    )
  )
)
